import smartGenerator from './src/services/itinerary/smartGenerator.js'

/**
 * Test Phase 3 with Paris to verify duplicate issue is resolved
 */
async function testPhase3Paris() {
  console.log('🧪 Testing Phase 3 with Paris (Original Duplicate Issue)')
  console.log('='.repeat(60))
  
  const tripData = {
    destination: 'Paris, France',
    categories: ['history', 'culture'],
    startDate: '2024-01-15',
    endDate: '2024-01-17',
    people: 2,
    budget: 1000
  }
  
  try {
    console.log('🎯 Trip Details:')
    console.log(`   Destination: ${tripData.destination}`)
    console.log(`   Categories: ${tripData.categories.join(', ')}`)
    console.log(`   Dates: ${tripData.startDate} to ${tripData.endDate}`)
    console.log(`   People: ${tripData.people}`)
    console.log(`   Budget: $${tripData.budget}`)
    console.log()
    
    console.log('🚀 Generating itinerary with Phase 3 Discovery...')
    const startTime = Date.now()
    const result = await smartGenerator.generateSmartItinerary(tripData)
    const endTime = Date.now()
    
    console.log(`⏱️ Generation completed in ${endTime - startTime}ms`)
    console.log()
    
    console.log('=== ITINERARY RESULT ===')
    console.log(`✅ Success: ${!!result}`)
    console.log(`📅 Days: ${result.days ? result.days.length : 0}`)
    console.log(`🔧 Generated by: ${result.generatedBy}`)
    console.log(`📋 Title: ${result.title}`)
    console.log()
    
    if (result.days && result.days.length > 0) {
      console.log('=== ITINERARY BREAKDOWN ===')
      const allActivities = []
      
      result.days.forEach((day, index) => {
        console.log(`📅 Day ${index + 1}:`)
        
        if (day.morning) {
          console.log(`   🌅 Morning: ${day.morning.activity}`)
          allActivities.push(day.morning.activity)
        }
        
        if (day.afternoon) {
          console.log(`   ☀️ Afternoon: ${day.afternoon.activity}`)
          allActivities.push(day.afternoon.activity)
        }
        
        if (day.evening) {
          console.log(`   🌙 Evening: ${day.evening.activity}`)
          allActivities.push(day.evening.activity)
        }
        
        console.log()
      })
      
      console.log('=== DUPLICATE ANALYSIS ===')
      console.log(`📊 Total activities: ${allActivities.length}`)
      
      // Find duplicates
      const activityCounts = {}
      allActivities.forEach(activity => {
        activityCounts[activity] = (activityCounts[activity] || 0) + 1
      })
      
      const duplicates = Object.entries(activityCounts)
        .filter(([activity, count]) => count > 1)
        .map(([activity, count]) => ({ activity, count }))
      
      if (duplicates.length > 0) {
        console.log('❌ DUPLICATES FOUND:')
        duplicates.forEach(({ activity, count }) => {
          console.log(`   🔄 "${activity}" appears ${count} times`)
        })
        console.log()
        console.log('🚨 Phase 3 did not resolve the duplicate issue!')
      } else {
        console.log('✅ NO DUPLICATES FOUND!')
        console.log('🎉 Phase 3 successfully resolved the duplicate issue!')
      }
      
      console.log()
      console.log('=== ACTIVITY DIVERSITY ===')
      const uniqueActivities = [...new Set(allActivities)]
      console.log(`🎯 Unique activities: ${uniqueActivities.length}/${allActivities.length}`)
      console.log(`📈 Diversity score: ${((uniqueActivities.length / allActivities.length) * 100).toFixed(1)}%`)
      
    } else {
      console.log('❌ No itinerary days generated')
    }
    
    // Get engine metrics
    const metrics = smartGenerator.getNewEngineMetrics()
    if (metrics) {
      console.log()
      console.log('=== ENGINE METRICS ===')
      console.log(`📊 Overall Success Rate: ${metrics.overall?.successRate?.toFixed(1)}%`)
      console.log(`⏱️ Average Processing Time: ${metrics.overall?.averageProcessingTime?.toFixed(0)}ms`)
    }
    
  } catch (error) {
    console.error('💥 Test failed with error:', error)
    console.error('Stack:', error.stack)
  }
  
  console.log()
  console.log('🧪 Phase 3 Paris test completed!')
}

// Run the test
testPhase3Paris().catch(console.error) 